{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "835839d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python program to find maximum\n",
    "# cash flow amongst a set of friends\n",
    "\n",
    "# Number of friends(or vertices in graph)\n",
    "N = 3\n",
    "\n",
    "# An utility function that returns\n",
    "# index of minimum value in arr[]\n",
    "def getMin(arr):\n",
    "\t\n",
    "\tminInd = 0\n",
    "\tfor i in range(1, N):\n",
    "\t\tif (arr[i] < arr[minInd]):\n",
    "\t\t\tminInd = i\n",
    "\treturn minInd\n",
    "\n",
    "# An utility function that returns\n",
    "# index of maximum value in arr[]\n",
    "def getMax(arr):\n",
    "\n",
    "\tmaxInd = 0\n",
    "\tfor i in range(1, N):\n",
    "\t\tif (arr[i] > arr[maxInd]):\n",
    "\t\t\tmaxInd = i\n",
    "\treturn maxInd\n",
    "\n",
    "# A utility function to\n",
    "# return minimum of 2 values\n",
    "def minOf2(x, y):\n",
    "\n",
    "\treturn x if x < y else y\n",
    "\n",
    "# amount[p] is indicating the net amount to\n",
    "# be credited/debited to/from person 'p'\n",
    "# If amount[p] is positive, then i'th\n",
    "# person will amount[i]\n",
    "# If amount[p] is negative, then i'th\n",
    "# person will give -amount[i]\n",
    "def minCashFlowRec(amount):\n",
    "\n",
    "\t# Find the indexes of minimum\n",
    "\t# and maximum values in amount[]\n",
    "\t# amount[mxCredit] shows the maximum\n",
    "\t# amount to be credited to a person.\n",
    "\t# And amount[mxDebit] indicates the maximum amount\n",
    "\t# to be taken (or debited) from any person.\n",
    "\t# So if there is a positive value in amount[],\n",
    "\t# then there has to be a negative value\n",
    "\tmxCredit = getMax(amount)\n",
    "\tmxDebit = getMin(amount)\n",
    "\n",
    "\t# If both amounts are 0,\n",
    "\t# then all amounts can be settled\n",
    "\tif (amount[mxCredit] == 0 and amount[mxDebit] == 0):\n",
    "\t\treturn 0\n",
    "\n",
    "\t# Find the minimum out of two amounts\n",
    "\tmin = minOf2(-amount[mxDebit], amount[mxCredit])\n",
    "\tamount[mxCredit] -=min\n",
    "\tamount[mxDebit] += min\n",
    "\n",
    "\t# If minimum is the maximum amount to be\n",
    "\tprint(\"Person \" , mxDebit , \" pays \" , min\n",
    "\t\t, \" to \" , \"Person \" , mxCredit)\n",
    "\n",
    "\t# Recur for the amount array. Note that\n",
    "\t# it is guaranteed that the recursion\n",
    "\t# would terminate as either amount[mxCredit]\n",
    "\t# or amount[mxDebit] becomes 0\n",
    "\tminCashFlowRec(amount)\n",
    "\n",
    "# Given a set of persons as graph[] where\n",
    "# graph[i][j] indicates the amount that\n",
    "# person i needs to pay the person j, this\n",
    "# function finds and prints the minimum\n",
    "# cash flow to settle all debts.\n",
    "def minCashFlow(graph):\n",
    "\n",
    "\t# Create an array amount[],\n",
    "\t# initialize all value in it as 0.\n",
    "\tamount = [0 for i in range(N)]\n",
    "\n",
    "\t# Calculate the net amount to be paid\n",
    "\t# to person 'p', and stores it in amount[p].\n",
    "\t# The value of amount[p] can be calculated by\n",
    "\t# subtracting debts of 'p' from credits of 'p'\n",
    "\tfor p in range(N):\n",
    "\t\tfor i in range(N):\n",
    "\t\t\tamount[p] += (graph[i][p] - graph[p][i])\n",
    "\n",
    "\tminCashFlowRec(amount)\n",
    "\t\n",
    "# Driver code\n",
    "\n",
    "# graph[i][j] indicates the amount\n",
    "# that person i needs to pay person j\n",
    "p0to1 = int(input(\"Debt Person 0 has to give to Person 1:\"))\t\n",
    "p0to2 = int(input(\"Debt Person 0 has to give to Person 2:\"))\n",
    "p1to0 = int(input(\"Debt Person 1 has to give to Person 0:\"))\n",
    "p1to2 = int(input(\"Debt Person 1 has to give to Person 2:\"))\n",
    "p2to0 = int(input(\"Debt Person 2 has to give to Person 0:\"))\n",
    "p2to1 = int(input(\"Debt Person 2 has to give to Person 1:\"))\n",
    "graph = [[0,p0to1,p0to2],[p1to0,0,p1to2],[p2to0,p2to1,0]]\n",
    "''''graph = [ [0, 1000, 2000],\n",
    "\t\t[0, 0, 5000],\n",
    "\t\t[0, 0, 0] ]'''\n",
    "\n",
    "minCashFlow(graph)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2ba431b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acd246d3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
